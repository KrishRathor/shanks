generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String?
  firstName     String?
  lastName      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(USER)
  campaigns     Campaign[]
  contacts      Contact[]
  segments      Segment[]
  automations   Automation[]
  templates     Template[]
  analytics     Analytics[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Campaign {
  id          String    @id @default(cuid())
  name        String
  subject     String
  content     String
  status      CampaignStatus @default(DRAFT)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  sentAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  contacts    Contact[]
  analytics   Analytics?

  @@map("campaigns")
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENT
}

model Contact {
  id          String    @id @default(cuid())
  email       String    @unique
  firstName   String?
  lastName    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  tags        String[]
  segments    Segment[] @relation("SegmentToContact")
  campaigns   Campaign[]
  automations Automation[]

  @@map("contacts")
}

model Segment {
  id          String    @id @default(cuid())
  name        String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  rules       Json      // Store segmentation rules as JSON
  contacts    Contact[] @relation("SegmentToContact")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("segments")
}

model Automation {
  id          String    @id @default(cuid())
  name        String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  trigger     Json      // Store trigger conditions as JSON
  actions     Json      // Store actions as JSON
  contacts    Contact[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("automations")
}

model Template {
  id          String    @id @default(cuid())
  name        String
  content     String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("templates")
}

model Analytics {
  id          String    @id @default(cuid())
  campaignId  String    @unique
  campaign    Campaign  @relation(fields: [campaignId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  opens       Int       @default(0)
  clicks      Int       @default(0)
  bounces     Int       @default(0)
  unsubscribes Int      @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("analytics")
}